/**
 * @typedef {Object} Env
 * @property {KVNamespace} POSTS - KV store for blog posts
 * @property {KVNamespace} CACHE - KV store for caching rendered posts
 * @property {string} BLOG_SECRET - Secret for blog admin operations
 */

export default {
    async fetch(request, env, ctx) {
        const url = new URL(request.url);
        const path = url.pathname;

        try {
            if (path === '/blog/posts') {
                // List all posts
                const { keys } = await env.POSTS.list();
                const posts = [];
                
                for (const key of keys) {
                    const post = await env.POSTS.get(key.name);
                    if (post) {
                        posts.push(JSON.parse(post));
                    }
                }

                return new Response(JSON.stringify(posts), {
                    headers: { 'Content-Type': 'application/json' }
                });
            }

            if (path.startsWith('/blog/post/')) {
                const postId = path.split('/').pop();
                
                // Check cache first
                const cached = await env.CACHE.get(`post:${postId}`);
                if (cached) {
                    return new Response(cached, {
                        headers: { 'Content-Type': 'text/html' }
                    });
                }

                // Get post from storage
                const postData = await env.POSTS.get(`post:${postId}`);
                if (!postData) {
                    return new Response('Post not found', { status: 404 });
                }

                const post = JSON.parse(postData);
                
                // Render post as HTML
                const html = `
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>${post.title}</title>
                        <link rel="stylesheet" href="/styles.css">
                    </head>
                    <body>
                        <article>
                            <h1>${post.title}</h1>
                            <p><em>Published: ${post.publishedAt}</em></p>
                            <div>${post.content}</div>
                        </article>
                        <a href="/blog">‚Üê Back to Blog</a>
                    </body>
                    </html>
                `;

                // Cache rendered HTML for 1 hour
                await env.CACHE.put(`post:${postId}`, html, { expirationTtl: 3600 });

                return new Response(html, {
                    headers: { 'Content-Type': 'text/html' }
                });
            }

            if (path === '/blog/create' && request.method === 'POST') {
                const authHeader = request.headers.get('Authorization');
                if (authHeader !== `Bearer ${env.BLOG_SECRET}`) {
                    return new Response('Unauthorized', { status: 401 });
                }

                const body = await request.json();
                const postId = crypto.randomUUID();
                const post = {
                    id: postId,
                    title: body.title,
                    content: body.content,
                    publishedAt: new Date().toISOString(),
                    author: body.author || 'Anonymous'
                };

                await env.POSTS.put(`post:${postId}`, JSON.stringify(post));
                
                return new Response(JSON.stringify({ 
                    message: 'Post created',
                    postId: postId 
                }), {
                    headers: { 'Content-Type': 'application/json' }
                });
            }

            // Default blog index
            return new Response(`
                <!DOCTYPE html>
                <html>
                <head>
                    <title>Blog</title>
                    <link rel="stylesheet" href="/styles.css">
                </head>
                <body>
                    <h1>Blog</h1>
                    <p>Welcome to the blog! This is generated by the blog worker.</p>
                    <div id="posts"></div>
                    <script>
                        fetch('/blog/posts')
                            .then(r => r.json())
                            .then(posts => {
                                const container = document.getElementById('posts');
                                posts.forEach(post => {
                                    const div = document.createElement('div');
                                    div.innerHTML = \`
                                        <h2><a href="/blog/post/\${post.id}">\${post.title}</a></h2>
                                        <p>\${post.publishedAt}</p>
                                    \`;
                                    container.appendChild(div);
                                });
                            });
                    </script>
                </body>
                </html>
            `, {
                headers: { 'Content-Type': 'text/html' }
            });

        } catch (error) {
            return new Response(`Blog Error: ${error.message}`, { status: 500 });
        }
    }
};